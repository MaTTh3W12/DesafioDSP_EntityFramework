//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DesafioEntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DesafioEntities : DbContext
    {
        public DesafioEntities()
            : base("name=DesafioEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<areaConocimiento> areaConocimiento { get; set; }
        public virtual DbSet<departamento> departamento { get; set; }
        public virtual DbSet<materia> materia { get; set; }
        public virtual DbSet<profesor> profesor { get; set; }
        public virtual DbSet<tipoMateria> tipoMateria { get; set; }
        public virtual DbSet<titulacion> titulacion { get; set; }
    
        public virtual int eliminarMateria(Nullable<int> idMateria)
        {
            var idMateriaParameter = idMateria.HasValue ?
                new ObjectParameter("idMateria", idMateria) :
                new ObjectParameter("idMateria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarMateria", idMateriaParameter);
        }
    
        public virtual int eliminarProfe(Nullable<int> id_profesor)
        {
            var id_profesorParameter = id_profesor.HasValue ?
                new ObjectParameter("id_profesor", id_profesor) :
                new ObjectParameter("id_profesor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarProfe", id_profesorParameter);
        }
    
        public virtual int insertarDepartamento(string departamento)
        {
            var departamentoParameter = departamento != null ?
                new ObjectParameter("departamento", departamento) :
                new ObjectParameter("departamento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarDepartamento", departamentoParameter);
        }
    
        public virtual int insertarMateria(string materia, string codigo_materia, Nullable<int> curso, Nullable<int> id_tipo_materia, Nullable<int> id_titulacion, Nullable<decimal> creditos_teoricos, Nullable<decimal> creditos_laboratorio, string duracion, Nullable<int> limiteAdmision, Nullable<int> gruposTeoria, Nullable<int> gruposLaboratorio)
        {
            var materiaParameter = materia != null ?
                new ObjectParameter("materia", materia) :
                new ObjectParameter("materia", typeof(string));
    
            var codigo_materiaParameter = codigo_materia != null ?
                new ObjectParameter("codigo_materia", codigo_materia) :
                new ObjectParameter("codigo_materia", typeof(string));
    
            var cursoParameter = curso.HasValue ?
                new ObjectParameter("curso", curso) :
                new ObjectParameter("curso", typeof(int));
    
            var id_tipo_materiaParameter = id_tipo_materia.HasValue ?
                new ObjectParameter("id_tipo_materia", id_tipo_materia) :
                new ObjectParameter("id_tipo_materia", typeof(int));
    
            var id_titulacionParameter = id_titulacion.HasValue ?
                new ObjectParameter("id_titulacion", id_titulacion) :
                new ObjectParameter("id_titulacion", typeof(int));
    
            var creditos_teoricosParameter = creditos_teoricos.HasValue ?
                new ObjectParameter("creditos_teoricos", creditos_teoricos) :
                new ObjectParameter("creditos_teoricos", typeof(decimal));
    
            var creditos_laboratorioParameter = creditos_laboratorio.HasValue ?
                new ObjectParameter("creditos_laboratorio", creditos_laboratorio) :
                new ObjectParameter("creditos_laboratorio", typeof(decimal));
    
            var duracionParameter = duracion != null ?
                new ObjectParameter("duracion", duracion) :
                new ObjectParameter("duracion", typeof(string));
    
            var limiteAdmisionParameter = limiteAdmision.HasValue ?
                new ObjectParameter("limiteAdmision", limiteAdmision) :
                new ObjectParameter("limiteAdmision", typeof(int));
    
            var gruposTeoriaParameter = gruposTeoria.HasValue ?
                new ObjectParameter("gruposTeoria", gruposTeoria) :
                new ObjectParameter("gruposTeoria", typeof(int));
    
            var gruposLaboratorioParameter = gruposLaboratorio.HasValue ?
                new ObjectParameter("gruposLaboratorio", gruposLaboratorio) :
                new ObjectParameter("gruposLaboratorio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarMateria", materiaParameter, codigo_materiaParameter, cursoParameter, id_tipo_materiaParameter, id_titulacionParameter, creditos_teoricosParameter, creditos_laboratorioParameter, duracionParameter, limiteAdmisionParameter, gruposTeoriaParameter, gruposLaboratorioParameter);
        }
    
        public virtual int insertarProfe(string nombre, string apellido, string despacho, string horario_Consultas, Nullable<int> id_area_conocimiento)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var despachoParameter = despacho != null ?
                new ObjectParameter("despacho", despacho) :
                new ObjectParameter("despacho", typeof(string));
    
            var horario_ConsultasParameter = horario_Consultas != null ?
                new ObjectParameter("horario_Consultas", horario_Consultas) :
                new ObjectParameter("horario_Consultas", typeof(string));
    
            var id_area_conocimientoParameter = id_area_conocimiento.HasValue ?
                new ObjectParameter("id_area_conocimiento", id_area_conocimiento) :
                new ObjectParameter("id_area_conocimiento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarProfe", nombreParameter, apellidoParameter, despachoParameter, horario_ConsultasParameter, id_area_conocimientoParameter);
        }
    
        public virtual int insertarTipo(string tipo)
        {
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarTipo", tipoParameter);
        }
    
        public virtual int modificarMateria(string materia, string codigo_materia, Nullable<int> curso, Nullable<int> id_tipo_materia, Nullable<int> id_titulacion, Nullable<decimal> creditos_teoricos, Nullable<decimal> creditos_laboratorio, string duracion, Nullable<int> limiteAdmision, Nullable<int> gruposTeoria, Nullable<int> gruposLaboratorio, Nullable<int> idMateria)
        {
            var materiaParameter = materia != null ?
                new ObjectParameter("materia", materia) :
                new ObjectParameter("materia", typeof(string));
    
            var codigo_materiaParameter = codigo_materia != null ?
                new ObjectParameter("codigo_materia", codigo_materia) :
                new ObjectParameter("codigo_materia", typeof(string));
    
            var cursoParameter = curso.HasValue ?
                new ObjectParameter("curso", curso) :
                new ObjectParameter("curso", typeof(int));
    
            var id_tipo_materiaParameter = id_tipo_materia.HasValue ?
                new ObjectParameter("id_tipo_materia", id_tipo_materia) :
                new ObjectParameter("id_tipo_materia", typeof(int));
    
            var id_titulacionParameter = id_titulacion.HasValue ?
                new ObjectParameter("id_titulacion", id_titulacion) :
                new ObjectParameter("id_titulacion", typeof(int));
    
            var creditos_teoricosParameter = creditos_teoricos.HasValue ?
                new ObjectParameter("creditos_teoricos", creditos_teoricos) :
                new ObjectParameter("creditos_teoricos", typeof(decimal));
    
            var creditos_laboratorioParameter = creditos_laboratorio.HasValue ?
                new ObjectParameter("creditos_laboratorio", creditos_laboratorio) :
                new ObjectParameter("creditos_laboratorio", typeof(decimal));
    
            var duracionParameter = duracion != null ?
                new ObjectParameter("duracion", duracion) :
                new ObjectParameter("duracion", typeof(string));
    
            var limiteAdmisionParameter = limiteAdmision.HasValue ?
                new ObjectParameter("limiteAdmision", limiteAdmision) :
                new ObjectParameter("limiteAdmision", typeof(int));
    
            var gruposTeoriaParameter = gruposTeoria.HasValue ?
                new ObjectParameter("gruposTeoria", gruposTeoria) :
                new ObjectParameter("gruposTeoria", typeof(int));
    
            var gruposLaboratorioParameter = gruposLaboratorio.HasValue ?
                new ObjectParameter("gruposLaboratorio", gruposLaboratorio) :
                new ObjectParameter("gruposLaboratorio", typeof(int));
    
            var idMateriaParameter = idMateria.HasValue ?
                new ObjectParameter("idMateria", idMateria) :
                new ObjectParameter("idMateria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("modificarMateria", materiaParameter, codigo_materiaParameter, cursoParameter, id_tipo_materiaParameter, id_titulacionParameter, creditos_teoricosParameter, creditos_laboratorioParameter, duracionParameter, limiteAdmisionParameter, gruposTeoriaParameter, gruposLaboratorioParameter, idMateriaParameter);
        }
    
        public virtual int modificarProfe(Nullable<int> id_profesor, string nombre, string apellido, string despacho, string horario_Consultas, Nullable<int> id_area_conocimiento)
        {
            var id_profesorParameter = id_profesor.HasValue ?
                new ObjectParameter("id_profesor", id_profesor) :
                new ObjectParameter("id_profesor", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var despachoParameter = despacho != null ?
                new ObjectParameter("despacho", despacho) :
                new ObjectParameter("despacho", typeof(string));
    
            var horario_ConsultasParameter = horario_Consultas != null ?
                new ObjectParameter("horario_Consultas", horario_Consultas) :
                new ObjectParameter("horario_Consultas", typeof(string));
    
            var id_area_conocimientoParameter = id_area_conocimiento.HasValue ?
                new ObjectParameter("id_area_conocimiento", id_area_conocimiento) :
                new ObjectParameter("id_area_conocimiento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("modificarProfe", id_profesorParameter, nombreParameter, apellidoParameter, despachoParameter, horario_ConsultasParameter, id_area_conocimientoParameter);
        }
    
        public virtual ObjectResult<mostrarMaterias_Result> mostrarMaterias(Nullable<int> idTipo)
        {
            var idTipoParameter = idTipo.HasValue ?
                new ObjectParameter("idTipo", idTipo) :
                new ObjectParameter("idTipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mostrarMaterias_Result>("mostrarMaterias", idTipoParameter);
        }
    
        public virtual ObjectResult<mostrarMateriasAll_Result> mostrarMateriasAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mostrarMateriasAll_Result>("mostrarMateriasAll");
        }
    
        public virtual ObjectResult<verDepartamentos_Result> verDepartamentos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<verDepartamentos_Result>("verDepartamentos");
        }
    
        public virtual ObjectResult<verProfe_Result> verProfe()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<verProfe_Result>("verProfe");
        }
    
        public virtual ObjectResult<verProfesById_Result> verProfesById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<verProfesById_Result>("verProfesById", idParameter);
        }
    
        public virtual ObjectResult<verTipos_Result> verTipos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<verTipos_Result>("verTipos");
        }
    }
}
